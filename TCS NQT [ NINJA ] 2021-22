
/////////////////////////////////////////////////////////////////////////  12 Spt [ slot 1 ]   //////////////////////////////////////////////////////////////////////////


Question 1. -------------------------------------------------------------------------------

Question 1:
An automobile company manufactures both a two wheeler (TW) and a four wheeler (FW). A company manager wants to make the production of both types of vehicle according to the given data below:
1st data, Total number of vehicle (two-wheeler + four-wheeler)=v
2nd data, Total number of wheels = W

The task is to find how many two-wheelers as well as four-wheelers need to manufacture as per the given data.

Example :
Input :
200  -> Value of V
540   -> Value of W

Solution :-------

#include <bits/stdc++.h>
using namespace std;
#define ll long long int

int main()
{
    ll n,m;
    cin >> n >> m;
    ll s= ((n*4)-m)/2;
    cout << "TW =" << s << " " << "FW=" << n-s ;
           
    return 0;
}
*******************************************************************************************************

Question 2. ----------------------------------------------------------------------------------

Given a string S(input consisting) of ‘*’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘*’ or ‘#’ to make it a valid string. The string is considered valid if the number of ‘*’ and ‘#’ are equal. The ‘*’ and ‘#’ can be at any position in the string.

Note : The output will be a positive or negative integer based on number of ‘*’ and ‘#’ in the input string.

(*>#): positive integer
(#>*): negative integer
(#=*): 0

Example 1:
Input 1:
###***   -> Value of S

Output :
0           → number of * and # are equal 

Solution : ---------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    string s;
    int a=0,b=0;
    getline(cin,s);
    for(auto i:s)
    if(i=='#') a++;
    else if(i=='*') b++;
    cout<<b-a;
}
*************************************************************************************************

