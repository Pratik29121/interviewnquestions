
/////////////////////////////////////////////////////////////////////////  12 Spt [ slot 1 ]   //////////////////////////////////////////////////////////////////////////


Question 1. -------------------------------------------------------------------------------

An automobile company manufactures both a two wheeler (TW) and a four wheeler (FW). A company manager wants to make the production of both types 
of vehicle according to the given data below:
1st data, Total number of vehicle (two-wheeler + four-wheeler)=v
2nd data, Total number of wheels = W

The task is to find how many two-wheelers as well as four-wheelers need to manufacture as per the given data.

Example :
Input :
200  -> Value of V
540   -> Value of W

Solution :-------

#include <bits/stdc++.h>
using namespace std;
#define ll long long int

int main()
{
    ll n,m;
    cin >> n >> m;
    ll s= ((n*4)-m)/2;
    cout << "TW =" << s << " " << "FW=" << n-s ;
           
    return 0;
}
*******************************************************************************************************

Question 2. ----------------------------------------------------------------------------------

Given a string S(input consisting) of ‘*’ and ‘#’. The length of the string is variable. The task is to find the minimum number of ‘*’ or ‘#’
to make it a valid string. The string is considered valid if the number of ‘*’ and ‘#’ are equal. The ‘*’ and ‘#’ can be at any position in the string.

Note : The output will be a positive or negative integer based on number of ‘*’ and ‘#’ in the input string.

(*>#): positive integer
(#>*): negative integer
(#=*): 0

Example 1:
Input 1:
###***   -> Value of S

Output :
0           → number of * and # are equal 

Solution : ---------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    string s;
    int a=0,b=0;
    getline(cin,s);
    for(auto i:s)
    if(i=='#') a++;
    else if(i=='*') b++;
    cout<<b-a;
}
*************************************************************************************************

Question 3. --------------------------------------------------------------------------------

A chocolate factory is packing chocolates into the packets. The chocolate packets here represent an array arrt of N number of integer values.
The task is to find the empty packets(0) of chocolate and push it to the end of the conveyor belt(array).

For Example:
N=7 and arr = [4,5,0,1.9,0,5,0].
There are 3 empty packets in the given set. These 3 empty packets represented as O should be pushed towards the end of the array
Example 1:
Input:
7  - Value of N
[4,5,0,1,0,0,5] - Element of arr[O] to arr[N-1],While input each element is separated by newline
Output:
4 5 1 9 5 0 0

Solution :----------------------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
  int n;
  cin >> n;
  int arr[n];
  int cnt=0;
  for(int i=0;i<n;i++)
  {
      cin >> arr[i];
  }
  for(int i=0;i<n;i++)
  {
      if(arr[i]==0)
      {
          cnt++;
          continue;
      }
      
      cout << arr[i] << " ";
  }
  for(int i=0;i<cnt;i++)
  {
      cout << 0 << " ";
  }
  return 0;
 
}
***********************************************************************************************************************

Question 4.---------------------------------------------------------------------------------------------------------

Joseph is learning digital logic subject which will be for his next semester. He usually tries to solve unit assignment problems before the lecture. 
Today he got one tricky question. The problem statement is “A positive integer has been given as an input. Convert decimal value to binary representation. 
Toggle all bits of it after the most significant bit including the most significant bit. Print the positive integer value after toggling all bits”.

Constraints :
1<=N<=100

Example 1:
Input :
10  -> Integer
Output :
5    -> result- Integer

Solution : --------------------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    int n; cin>>n;
    int k=(1<<(int)floor(log2(n))+1)-1;
    cout<<(n^k);
}

*************************************************************************************************************************************

Question 5.------------------------------------------------------------------------------------------------

Jack is always excited about sunday. It is favourite day, when he gets to play all day. And goes to cycling with his friends. 
So every time when the months starts he counts the number of sundays he will get to enjoy. Considering the month can start with any day,
be it Sunday, Monday…. Or so on.
Count the number of Sunday jack will get within n number of days.

Example 1:
Input 
mon-> input String denoting the start of the month.
13  -> input integer denoting the number of days from the start of the month.

Output :
2    -> number of days within 13 days.

Solution :---------------------
#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    string str;
    cin >> str;
    int n; cin>>n;
    int res=1;
    string arr[]={"mon","tue,","wed","thu","fri","sat","sun"};
    for(int i=1;i<=str.length();i++)
    {
        if(arr[i]==str)
        break;
        
       	int rem=6-i;
       	n=n-rem;  	 
       	if(n>0)
        res+=n/7;
    }
    cout << res;
          
}
**********************************************************************************************************************************



////////////////////////////////////////////////////////////////////////  12 Sept [ Slot 2 ]  ////////////////////////////////////////////////////////////////////////////////

Question 1.-----------------------------------------------------------------------------------------------------------------

A parking lot in a mall has RxC number of parking spaces. Each parking psace will either be  empty(0) or full(1).
The status (0/1) of a parking space is represented as the element of the matrix.
The task is to find index of the prpeinzta row(R) in the parking lot that has the most of the parking spaces full(1).

Note :
RxC- Size of the matrix
Elements of the matrix M should be only 0 or 1.

Example 1:
Input :
3   -> Value of R(row)
3	-> value of C(column)
[0 1 0 1 1 0 1 1 1] -> Elements of the array M[R][C] where each element is separated by new line.

Solution  :--------------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
    int r,c,a,sum=0,m=INT_MIN,in=0;
    cin>>r>>c;
    for(int i=0;i<r;i++)
    {
        for(int j=0;j<c;j++)
        {
            cin>>a;
            sum+=a;
        }
        if(sum>m)
        {
            m=sum;
            in=i+1;
        }
        sum=0;
    }
    cout<<in;
}
****************************************************************************************************************************************

Question 2.------------------------------------------------------------------------------------------------

Given an integer array Arr of size N the task is to find the count of elements whose value is greater than all of its prior elements.
Note : 1st element of the array should be considered in the count of the result.
For example,
Arr[]={7,4,8,2,9}
As 7 is the first element, it will consider in the result.
8 and 9 are also the elements that are greater than all of its previous elements.

Since total of  3 elements is present in the array that meets the condition.
Hence the output = 3.

Solution :------------------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
  int n;
  cin >> n;
  int arr[n];
  int cnt=0;
  for(int i=0;i<n;i++)
  {
      cin >> arr[i];
  }
  for(int i=0;i<n;i++)
  {
       if(arr[i]>=arr[0])
       {
           cnt++;
       }
  }
  cout << cnt;
}
*************************************************************************************************************************************************

Question 3:----------------------------------------------------------------------------

Airport security officials have confiscated several item of the passengers at the security check point. All the items have been dumped into a huge box (array). Each item possesses a certain amount of risk[0,1,2]. Here, the risk severity of the items represent an array[] of N number of integer values. The task here is to sort the items based on their levels of risk in the array. The risk values range from 0 to 2.

Example :
Input :
7  -> Value of N
[1,0,2,0,1,0,2]-> Element of arr[0] to arr[N-1], while input each element is separated by new line.

Output :
0 0 0 1 1 2 2  -> Element after sorting based on risk severity 

Solution:--------------------------

#include <bits/stdc++.h>
using namespace std;
 
int main()
{
  int n;
  cin >> n;
  int arr[n];
  for(int i=0;i<n;i++)
  {
      cin >> arr[i];
  }
  
  sort(arr,arr+n);
  
  for(int i=0;i<n;i++)
  {
       cout << arr[i] << " ";
  }
  cout << endl;
}
***************************************************************************************************************************************


/////////////////////////////////////////////////////////////////////////// 13 Sept [ slot 1 ] ////////////////////////////////////////////////////////////////////////////////

Question 1 :------------------------------------------------------------------------------------------------------------

Question 1:
A party has been organised on cruise. The party is organised for a limited time(T). The number of guests entering (E[i]) and leaving (L[i]) the party at every hour is represented as elements of the array. The task is to find the maximum number of guests present on the cruise at any given instance within T hours.

Example 1:
Input :
5    -> Value of T
[7,0,5,1,3]  -> E[], Element of E[0] to E[N-1], where input each element is separated by new line 
[1,2,1,3,4]   -> L[], Element of L[0] to L[N-1], while input each element is separate by new line.

Output :
8     -> Maximum number of guests on cruise at an instance.

Solution :------------------------

 #include <bits/stdc++.h>
using namespace std;
 
int main()
{
  int n;
  cin >> n;
  int arr[n];
  int arr1[n];
  for(int i=0;i<n;i++)
  {
      cin >> arr[i];
  }
  for(int i=0;i<n;i++)
  {
      cin >> arr1[i];
  }
  int Max=0,sum=0;
  
  for(int i=0;i<n;i++)
    {
        sum+=arr[i]-arr1[i];
        Max=max(sum,Max);
    }
    cout << Max;
}
*******************************************************************************************************************************************

Question 2 : ------------------------------------------------------------------------------------------------------

At a fun fair, a street vendor is selling different colours of balloons. He sells N number of different colours of balloons (B[]). The task is to find the colour (odd) of the balloon which is present odd number of times in the bunch of balloons.

Note:
If there is more than one colour which is odd in number, then the first colour in the array which is present odd number of times is displayed. The colours of the balloons can all be either upper case or lower case in the array. If all the inputs are even in number, display the message “All are even”.

Example 1:
7  -> Value of N
[r,g,b,b,g,y,y]  -> B[] Elements B[0] to B[N-1], where input each element is sepārated by ṉew line.

Output :
r -> [r,g,b,b,g,y,y]  -> “r” colour balloon is present odd number of times in the bunch.










